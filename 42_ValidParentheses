leetcode 20. Valid Parentheses
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

class Solution {
     public static  boolean isOpening(char c){
         return (c == '(' || c=='{' || c=='[');
             
        }
        public static boolean isBalanced(char a , char b){
            return ( a == '(' && b==')' ||
                a == '{' && b=='}' ||
                a == '[' && b == ']'
               );
              
        }
    public boolean isValid(String s) {
       
        Stack<Character> str = new Stack<>();
        for(int i =0;i<s.length();i++){
            if( isOpening(s.charAt(i))){
                str.push(s.charAt(i));
            }
            else{
                if(str.isEmpty()){
                    return false;
                }
                else if(! isBalanced(str.peek() , s.charAt(i) )){
                    return false;
                }
                
                      str.pop();
                
            }
        }

        return str.isEmpty();

    }
}
