Leetcode 97. Interleaving String
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m 
substrings
 respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.


import java.util.*;
class Solution {

    public static boolean isInterLeavingString(Stack<Character> str1, Stack<Character> str2 , String s3 , int index ,Map<String , Boolean> memo){

    if(index ==  s3.length() )
   {
    return str1.isEmpty() && str2.isEmpty();
   }   
   String key=str1.size() + "," +str2.size() + "," + index;
   if(memo.containsKey(key)){
       return memo.get(key);
   }
    boolean result =false;
    if(!str1.isEmpty() && str1.peek()==s3.charAt(index)){
        str1.pop();
        result|= isInterLeavingString(str1 ,str2 ,s3,index+1 , memo);
        str1.push(s3.charAt(index));
    }
    if(!str2.isEmpty() && str2.peek()==s3.charAt(index)){
        str2.pop();
        result|= isInterLeavingString(str1 ,str2 ,s3,index+1,memo);
        str2.push(s3.charAt(index));
    }
    memo.put(key , result);
     return result;

    }
    public boolean isInterleave(String s1, String s2, String s3) {
        Stack<Character> str1= new Stack<>(); 
        Stack<Character> str2= new Stack<>(); 
        boolean ans=true;
    for(int i= s1.length()-1;i>=0;i-- ){
        str1.push(s1.charAt(i));
    }
    for(int j = s2.length()-1;j>=0;j--){
        str2.push(s2.charAt(j));
    }
       Map<String, Boolean> memo = new HashMap<>();
     return isInterLeavingString(str1 , str2 , s3 , 0 ,memo);
    }
}
