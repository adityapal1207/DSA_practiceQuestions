Leetcode 5 Longest Palindromic Substring
Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

Solution (giving TLE)
import java.util.*;
class Solution {
   

    public String longestPalindrome(String s) {
        String ans="";
        if(s.length()==1 || s.length()==0)return s;
       for(int i =0;i<s.length();i++)
      {
          String temp="";
          String temp2="";
           for(int j=i;j<s.length();j++){
               temp= s.charAt(j)+temp;
               temp2=temp2+s.charAt(j);
               if(temp.equals(temp2)){
               if(temp.length()>ans.length()){
                   ans=temp;
               }
               }
           
           }
          

           
      }
      return ans;
    }
}




Solution 2
all test cases passed

import java.util.*;
class Solution {
   

    public String longestPalindrome(String s) {
        String ans="";
        if(s.length()<=1 )return s;
       for(int i =1;i<s.length();i++)
      {
         int low =i;
         int high=i;
           
           while(s.charAt(low) == s.charAt(high)){
               low--;
            high++;
            if(low==-1 || high == s.length()) 
            break;
           }
           String palindrome = s.substring(low+1 ,high);
           if(palindrome.length()>ans.length()){
               ans=palindrome;
           }
           low=i-1;
           high=i;
           while(s.charAt(low) ==  s.charAt(high)){
               low--;
               high++;
               if(low==-1 || high ==s.length())
               break;
           }
           palindrome = s.substring(low+1 , high);
           if(palindrome.length()>ans.length()){
               ans= palindrome;
           }
      
    }
  return ans;
}
}
