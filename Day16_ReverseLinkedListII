LeetCode   92. Reverse Linked List II

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);
        dummy.next=head;
       ListNode prev= dummy;
       ListNode curr=head;
         
        for(int i =1 ;i<left;i++){
            prev = prev.next;
            curr=curr.next;
        } 
           ListNode prevHeadNode=curr;
            int noOfIterations = right - left + 1;
            ListNode preNode = null;
         for(int i=1;i<=noOfIterations; i++){
               ListNode temp = curr.next;
               curr.next = preNode;
               preNode = curr;
               curr= temp;
             
         }
         prev.next=preNode;
         prevHeadNode.next=curr;
         return dummy.next;
         
        


       
    }
}

