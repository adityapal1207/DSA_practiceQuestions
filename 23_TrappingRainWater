LeetCode     42. Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105
Solution   


import java.util.*;
class Solution {
    public int trap(int[] height) {
        int leftArr[]=new int[height.length];
        int rightArr[]=new int[height.length];
        int temp=0;
        for(int i=0;i<height.length;i++){
            int max=Math.max(height[i],temp);
            leftArr[i]=max;
            temp=max;
        }  int temp2=0;
        int k=0;
        for(int i=height.length-1;i>=0;i--){
            int max=Math.max(height[i],temp2);
            rightArr[k]=max;
            temp2=max;
            k++;
        }  int sum=0;
         int count=height.length-1;
       
        for(int i=0;i<height.length;i++){
            int min= Math.min( leftArr[i],rightArr[count]);
            sum= sum + Math.abs(min-height[i]);
            count--;
        }
        
        return sum;

    }
}


